/*
 * Author: FreeIdea
 * Created Time:  maxv011/9/maxv5 maxv1:15:11
 * File Name: hdumaxvmaxvmaxvmaxv.cpp
 */
#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;
const int maxint = -1u>>1;
template <class T> bool get_max(T& a, const T &b) {return b > a? a = b, 1: 0;}
template <class T> bool get_min(T& a, const T &b) {return b < a? a = b, 1: 0;}

const int maxv = 26;

struct automaton {
    struct node {
        int ch[maxv], fail;
        int word;
        node(): word(false) {
            for(int i = 0; i < maxv; i++) {
                ch[i] = -1;
            }
            word = 0;
        }
    };
    vector<node> nd;
    void clear() {
        nd = vector<node>(1);
    }
    void insert(const char* word) {
        int cur = 0;
        for (int i = 0; word[i] != '\0'; ++i) {
            int l = word[i] - 'a';
            if (nd[cur].ch[l] == -1) {
                cur = nd[cur].ch[l] = nd.size();
                nd.push_back(node());
            } else {
                cur = nd[cur].ch[l];
            }
        }
        nd[cur].word++;
    }
    void build() {
        nd[0].fail = 0;
        queue<int> q;
        for (int i = 0; i < maxv; ++i) {
            int c = nd[0].ch[i];
            if (c == -1)
                nd[0].ch[i] = 0;
            else {
                q.push(c);
                nd[c].fail = 0;
            }
        }
        while (!q.empty()) {
            int cur = q.front();
            q.pop();
            for (int i = 0; i < maxv; ++i) {
                int c = nd[cur].ch[i];
                if (c == -1) {
                    nd[cur].ch[i] = nd[nd[cur].fail].ch[i];
                } else {
                    q.push(c);
                    nd[c].fail = nd[nd[cur].fail].ch[i];
                }
            }
        }
    }
};

automaton atm;

int ca, n;
char pat[50 + 5], str[1000000 + 5];

int main() {
    scanf("%d", &ca);
    while(ca--) {
        scanf("%d", &n);
        atm.clear();
        for(int i = 0; i < n; i++) {
            scanf("%s", pat);
            atm.insert(pat);
        }
        atm.build();
        scanf("%s", str);
        int ans = 0, cur = 0;
        for(int i = 0; str[i]; i++) {
            int v = str[i] - 'a';
            cur = atm.nd[cur].ch[v];
            int p = cur;
            while(p != 0 && atm.nd[p].word != -1) {
                ans += atm.nd[p].word;
                atm.nd[p].word = -1;
                p = atm.nd[p].fail;
            }
        } 
        printf("%d\n", ans);
    }
    return 0;
}